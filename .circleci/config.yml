version: 2.1

orbs:
  docker: circleci/docker@0.5.1
  helm: circleci/helm@0.1.3
  multirepo: dnephin/multirepo@0.0.7

workflows:
  version: 2
  deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - master
                - test
      - upload:
          requires:
            - deploy
          filters:
            branches:
              only:
                - master
                - test

defaults: &defaults
  working_directory: /tmp

                
jobs:
  deploy:
    <<: *defaults
    docker:
      - image: docker:stable-git
    steps:
      - deploy:
          paths: "dome-backend"
          run_on_upstream: false
      - run: echo $COMPONENT_DIR  
      - persist_to_workspace:
            root: workspace
            paths:
                - new-env-vars
  upload:
    <<: *defaults
    docker:
      - image: alpine/helm:2.13.0
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: cat workspace/new-env-vars >> $BASH_ENV
      - run: ls -la
      - run: echo $COMPONENT_DIR
      - upload:
          paths: ""
    

commands:
  deploy:
    parameters:
      paths:
        type: string
        description: |
          A list of file paths used with 'git diff' to check for modification.
        default: "dome-backend"
      upstream_branch:
        type: string
        description: |
          The upstream branch used with 'git merge-base' to find the most recent
          commit shared by HEAD and the upstream branch.
        default: origin/master
      working_directory:
        type: string
        description: |
          Directory to change to before executing the command.
        default: "$PWD"
      run_on_upstream:
        type: boolean
        description: |
          When run_on_upstream is true, and HEAD matches the upstream_branch the
          job always run. When false the job will not run when HEAD matches
          the upstream_branch.
        default: true
    steps:
      - checkout
      - run:
          name: Check if job should run
          command: |
            cd << parameters.working_directory >>
            upstream="$(git merge-base HEAD << parameters.upstream_branch >>)"
            echo "Comparing to upstream commit $upstream"
            <<# parameters.run_on_upstream >>
            if [[ "$(git rev-parse HEAD)" == "$upstream" ]]; then
              echo "HEAD matches upstream, running with no diff"
              exit 0
            fi
            <</ parameters.run_on_upstream >>
            if [[ -z "$upstream" ]]; then
              echo "git merge-base failed"
              exit 1
            fi
            # Print the diff
            export PAGER=$(git diff --name-only --stat=80 $upstream -- << parameters.paths >> | sed 's|\([^\/]*\).*|\1|'  | uniq)
            # Halt if no diff
            if git diff --quiet $upstream -- << parameters.paths >>; then
              echo "Skipping job, no files modified"
              circleci-agent step halt
            fi
            echo "Changed Components are  => $PAGER"
            export COMPONENT="NOTSET"
            for CHANGE in $PAGER; do ENV_DIR=${CHANGE%%/*}; done
            for CHANGE in $PAGER; do if [ "$ENV_DIR" == "${CHANGE%%/*}" ]; then export COMPONENT="$CHANGE"; else echo "Only one component per PR should be changed" && exit 1;  fi; done
            if [ "$COMPONENT" == "NOTSET" ]; then echo "No component is changed!" && exit 1;  fi
            echo "Initializing Component => $COMPONENT"
            echo $COMPONENT | cut -f1 -d"/"
            export COMPONENT_DIR="$COMPONENT"
            echo $COMPONENT_DIR
            cd $COMPONENT_DIR
            mkdir -p workspace
            echo "export HELM_DIR=$COMPONENT_DIR" >> workspace/new-env-vars
            cat workspace/new-env-vars >> $BASH_ENV

  upload:
    parameters:
      paths:
        type: string
        description: |
          A list of file paths used with 'git diff' to check for modification.
        default: "dome-backend"
    steps:
      - checkout
      - run:
          name: Upload Helm Chart
          command: |
            echo "Initializing Dir => $COMPONENT_DIR"
            cd $COMPONENT_DIR
            helm init --client-only
            helm repo add charts https://charts.tmt.tools --username $TMT_CHARTS_USERNAME --password $TMT_CHARTS_PASSWORD
            helm dep build
            helm package .
            FILENAME="$(find . \( -name "$COMPONENT*.tgz" \) -exec basename {} \;)"
            if [ "$FILENAME" == "" ]; then echo "No Chart Version Found!" && exit 1;  fi
            echo $FILENAME
            curl --user $TMT_CHARTS_USERNAME:$TMT_CHARTS_PASSWORD --data-binary "@$FILENAME" https://charts.tmt.tools/api/charts
