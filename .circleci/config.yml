version: 2.1

orbs:
  docker: circleci/docker@0.5.1
  helm: circleci/helm@0.1.3
  multirepo: dnephin/multirepo@0.0.7

workflows:
  version: 2
  deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - master

# commands:
#   deploy:
#     parameters:
#       paths:
#         type: string
#         description: |
#           A list of file paths used with 'git diff' to check for modification.
#       upstream_branch:
#         type: string
#         description: |
#           The upstream branch used with 'git merge-base' to find the most recent
#           commit shared by HEAD and the upstream branch.
#         default: origin/master
#       working_directory:
#         type: string
#         description: |
#           Directory to change to before executing the command.
#         default: "$PWD"
#       run_on_upstream:
#         type: boolean
#         description: |
#           When run_on_upstream is true, and HEAD matches the upstream_branch the
#           job always run. When false the job will not run when HEAD matches
#           the upstream_branch.
#         default: true


jobs:
  deploy:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - multirepo/run-job-for-paths:
          paths: "."
          working_directory: $PWD
          run_on_upstream: false
      - run: echo $PAGER
      - run:
          name: Before Steps
          command: |
            # apk update && apk add curl && apk add --no-cache bash git openssh
            echo "Resetting $target_branch to where the remote version is..."
            git checkout -q $target_branch
            git reset --hard -q origin/$target_branch
            git checkout -q $CIRCLE_BRANCH

            echo "Getting list of changed files..."
            export NEW_REF=$CIRCLE_SHA1
            if [ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME ]; then export BASE_REF="origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"; else export BASE_REF="$CI_COMMIT_BEFORE_SHA";  fi
            echo $BASE_REF
            echo $NEW_REF
            git fetch origin
            git diff --name-only $NEW_REF $BASE_REF
            export COMPONENT="NOTSET"
            export CHANGED_FILES=$(git diff --name-only $NEW_REF $BASE_REF | sed 's|\([^\/]*\).*|\1|'  | uniq)
            for CHANGE in $CHANGED_FILES; do if [ "$COMPONENT" == "NOTSET" ]; then export COMPONENT="$CHANGE"; else echo "Only one component per PR should be changed" && exit 1;  fi; done
            if [ "$COMPONENT" == "NOTSET" ]; then echo "No component is changed!" && exit 1;  fi
            echo "Initializing Component => $COMPONENT"
            export COMPONENT_DIR="$COMPONENT"
            echo $COMPONENT_DIR
    